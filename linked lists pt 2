//inserting a new element to a linked list

#include <iostream>
using namespace std;

class Node 
{
public:
    int Value;
    Node* Next;
};

void printList(Node* n){
    while(n!=NULL){
        cout << n->Value << endl;
        n = n->Next;
    }
}

void insertAtTheFront(Node**head, int newValue)//double pointer so we pass address into the parameter
{
    //prepare a newNode
    Node * newNode = new Node();
    newNode ->Value = newValue;
    //put it infront of current head
    newNode->Next = *head;
    //move head of list to point to the newNode
    *head = newNode;
}

void insertAtTheEnd(Node**head, int newValue){
    //prepare a newNode
    Node * newNode = new Node();
    newNode ->Value = newValue;
    newNode->Next = NULL;
    //if link is empty, newNode will be a headnode
    if(*head == NULL){
        *head = newNode;
        return;
    }
    //find the last node
    Node*last = *head;
    while(last->Next!=NULL){
        last = last->Next;
    }
    //insert newnode after last node(at end)
    last->Next = newNode;
}

void insertAfter(Node*previous, int newValue){
    //check if prev is NULL
    if(previous == NULL){
        cout<<"Previous cannot be NULL";
        return;
    }
    //Prepare a newNode
    Node*newNode = new Node();
    newNode->Value = newValue;
    //Insert newNode after previous
    newNode->Next = previous->Next;
    previous->Next = newNode;
}

int main(){
    Node* head = new Node();
    Node* second = new Node();
    Node* third = new Node();

    head->Value = 1; 
    head->Next = second;
    second->Value = 2;
    second->Next = third;
    third->Value = 3;
    third->Next = NULL;

    insertAtTheFront(&head, -1);
    insertAtTheEnd(&head, -2);
    insertAfter(second, 6);
    printList(head);
}
