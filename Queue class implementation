#include <iostream>
#include <string>
using namespace std;

struct Node {
    string data;
    Node* next;
};

struct Queue {
    Node* front;
    Node* rear;
    
    Queue() {
        front = rear = nullptr;
    }

    void Enqueue(string value) {
        Node* temp = new Node();
        temp->data = value;
        temp->next = nullptr;
        if (rear == nullptr) {
            front = rear = temp;
        } else {
            rear->next = temp;
            rear = temp;
        }
    }

    string Dequeue() {
        if (front == nullptr) {
            cout << "Queue is empty" << endl;
            return "";
        }
        Node* temp = front;
        string dequeuedValue = front->data;
        front = front->next;
        if (front == nullptr) {
            rear = nullptr;
        }
        delete temp;
        return dequeuedValue;
    }

    void Display() {
        if (front == nullptr) {
            cout << "Queue is empty" << endl;
            return;
        }
        Node* temp = front;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    int LengthOfString() {
        int totalLength = 0;
        while (front != nullptr) {
            string value = Dequeue();
            totalLength += value.length();
        }
        return totalLength;
    }
};

int main() {
    Queue q;

    q.Enqueue("Once");
    q.Enqueue("Upon");
    q.Enqueue("Time");
    q.Dequeue();

    cout << "Displaying: ";
    q.Display();

    int totalLength = q.LengthOfString();
    cout << "Total length of strings: " << totalLength << endl;

    cout << "Queue after finding length and dequeing everthing: ";
    q.Display();

    return 0;
}
